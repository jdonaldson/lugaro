-- Generated by Haxe 4.0.0
local _hx_array_mt = {
  __newindex = function(t,k,v)
    local len = t.length
    t.length =  k >= len and (k + 1) or len
    rawset(t,k,v)
  end
}

local function _hx_tab_array(tab,length)
  tab.length = length
  return setmetatable(tab, _hx_array_mt)
end

local function _hx_anon_newindex(t,k,v) t.__fields__[k] = true; rawset(t,k,v); end
local _hx_anon_mt = {__newindex=_hx_anon_newindex}
local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_anon_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_anon_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_anon_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_anon_newindex, __index=prototype})
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local Array = _hx_e()
local Main = _hx_e()
__golgi_Api = _hx_e()
local Api = _hx_e()
local Math = _hx_e()
local Reflect = _hx_e()
local String = _hx_e()
local Std = _hx_e()
__golgi_TableMap = _hx_e()
__golgi_Error = _hx_e()
__golgi_Golgi = _hx_e()
__golgi__Path_Path_Impl_ = _hx_e()
__golgi_meta_MetaGolgi = _hx_e()
__haxe_IMap = _hx_e()
__haxe_Log = _hx_e()
__lua_Boot = _hx_e()
__lua_PairTools = _hx_e()
__lug_LugMeta = _hx_e()
__lug_Lugaro = _hx_e()
__lug_Result = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.prototype = _hx_a();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local ret = _g;
  local _g3 = 0;
  while (_g3 < a.length) do 
    local i1 = a[_g3];
    _g3 = _g3 + 1;
    ret:push(i1);
  end;
  do return ret end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _gthis = self;
  local cur_length = 0;
  local i = _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end});
  while (i:hasNext()) do 
    local i1 = i:next();
    _G.table.insert(tbl, Std.string(i1));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g1 = pos;
  local _g = _end;
  while (_g1 < _g) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    ret:push(self[i]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g1 = pos;
  local _g = pos + len;
  while (_g1 < _g) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g11 = pos + len;
  local _g2 = self.length;
  while (_g11 < _g2) do 
    _g11 = _g11 + 1;
    local i1 = _g11 - 1;
    self[i1] = self[i1 + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g1 = 0;
  local _g = len;
  while (_g1 < _g) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g1 = 0;
  local _g = self.length;
  while (_g1 < _g) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    if (self[i] == x) then 
      local _g3 = i;
      local _g2 = self.length - 1;
      while (_g3 < _g2) do 
        _g3 = _g3 + 1;
        local j = _g3 - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g1 = fromIndex;
  local _g = _end;
  while (_g1 < _g) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  local _gthis = self;
  local cur_length = 0;
  do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end}) end
end

Main.new = {}
Main.main = function() 
  __haxe_Log.trace("hello lugaro", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="Main.hx",lineNumber=4,className="Main",methodName="main"}));
  local _hx_status, _hx_result = pcall(function() 
  
      local o = __lug_Lugaro.route(__golgi__Path_Path_Impl_.fromString("foo"), _hx_e(), nil, Api.new(__lug_LugMeta.new()));
      __haxe_Log.trace(Std.string(Std.string(o)) .. Std.string(" is the value for o"), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="Main.hx",lineNumber=7,className="Main",methodName="main"}));
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
  
    local _hx_1 = _hx_result
    local e = _hx_1
    __haxe_Log.trace(Std.string(Std.string(e)) .. Std.string(" is the value for e"), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="Main.hx",lineNumber=9,className="Main",methodName="main"}));
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
end

__golgi_Api.new = function(meta) 
  local self = _hx_new(__golgi_Api.prototype)
  __golgi_Api.super(self,meta)
  return self
end
__golgi_Api.super = function(self,meta) 
  self.__golgi_meta__ = meta;
  self.__golgi_dict__ = __golgi_TableMap.new();
  self:__golgi_init__();
end
__golgi_Api.prototype = _hx_a();
__golgi_Api.prototype.__golgi_init__ = function(self) 
end
__golgi_Api.prototype.__golgi__ = function(self,parts,params,request) 
  do return nil end
end

Api.new = function(meta) 
  local self = _hx_new(Api.prototype)
  Api.super(self,meta)
  return self
end
Api.super = function(self,meta) 
  __golgi_Api.super(self,meta);
end
Api.prototype = _hx_a();
Api.prototype.foo = function(self) 
  do return __lug_Result.OK("hi") end
end
Api.prototype.__golgi__ = function(self,parts,params,request) 
  local path = "";
  if (parts.length == 0) then 
    parts = _hx_tab_array({}, 0);
  else
    path = parts[0];
  end;
  if (self.__golgi_dict__.t[path] ~= nil) then 
    do return self.__golgi_dict__.t[path](parts, params, request) end;
  else
    _G.error(__golgi_Error.NotFound(parts[0]),0);
  end;
end
Api.prototype.__golgi_init__ = function(self) 
  local _gthis = self;
  self.__golgi_dict__.t["foo"] = function(parts,params,request) 
    if (parts.length > 1) then 
      _G.error(__golgi_Error.TooManyValues,0);
    end;
    do return _gthis:foo() end;
  end;
end
Api.__super__ = __golgi_Api
setmetatable(Api.prototype,{__index=__golgi_Api.prototype})

Math.new = {}
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

Reflect.new = {}
Reflect.field = function(o,field) 
  if (_G.type(o) == "string") then 
    if (field == "length") then 
      do return _G.string.len(o) end;
    else
      do return String.prototype[field] end;
    end;
  else
    local _hx_status, _hx_result = pcall(function() 
    
        do return o[field] end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
    
      local _hx_1 = _hx_result
      local e = _hx_1
      do return nil end;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end;
end
Reflect.fields = function(o) 
  if (_G.type(o) == "string") then 
    do return Reflect.fields(String.prototype) end;
  else
    local _g = _hx_tab_array({}, 0);
    local f = __lua_Boot.fieldIterator(o);
    while (f:hasNext()) do 
      local f1 = f:next();
      _g:push(f1);
    end;
    do return _g end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_a();
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local i = 0;
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local r = _G.string.find(self, str, startIndex1, true);
    local p = (function() 
      local _hx_1
      if ((r ~= nil) and (r > 0)) then 
      _hx_1 = r - 1; else 
      _hx_1 = -1; end
      return _hx_1
    end )();
    if ((p == -1) or (p > startIndex)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  local delim_offset = (function() 
    local _hx_1
    if (#delimiter > 0) then 
    _hx_1 = #delimiter; else 
    _hx_1 = 1; end
    return _hx_1
  end )();
  while (idx ~= nil) do 
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = _G.string.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.get_length = function(self) 
  do return _G.string.len(self) end
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

Std.new = {}
Std.string = function(s) 
  do return __lua_Boot.__string_rec(s) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end

__golgi_TableMap.new = function() 
  local self = _hx_new(__golgi_TableMap.prototype)
  __golgi_TableMap.super(self)
  return self
end
__golgi_TableMap.super = function(self) 
  self.t = ({});
end
__golgi_TableMap.prototype = _hx_a();
__golgi_TableMap.prototype.get = function(self,k) 
  do return self.t[k] end
end
__golgi_TableMap.prototype.set = function(self,k,v) 
  self.t[k] = v;
end
__golgi_TableMap.prototype.exists = function(self,k) 
  do return self.t[k] ~= nil end
end
__golgi_TableMap.prototype.toString = function(self) 
  do return Std.string(self.t) end
end
__golgi_TableMap.prototype.keys = function(self) 
  do return __lua_PairTools.pairsFold(self.t, function(x,y,z) 
    z:push(Std.string(x));
    do return z end;
  end, _hx_tab_array({}, 0)) end
end

__golgi_Error.NotFound = function(path) local _x = _hx_tab_array({[0]="NotFound",0,path,__enum__=__golgi_Error}, 3); return _x; end 
__golgi_Error.InvalidValue = function(name) local _x = _hx_tab_array({[0]="InvalidValue",1,name,__enum__=__golgi_Error}, 3); return _x; end 
__golgi_Error.InvalidValueParam = function(name) local _x = _hx_tab_array({[0]="InvalidValueParam",2,name,__enum__=__golgi_Error}, 3); return _x; end 
__golgi_Error.Missing = function(name) local _x = _hx_tab_array({[0]="Missing",3,name,__enum__=__golgi_Error}, 3); return _x; end 
__golgi_Error.MissingParam = function(name) local _x = _hx_tab_array({[0]="MissingParam",4,name,__enum__=__golgi_Error}, 3); return _x; end 
__golgi_Error.TooManyValues = _hx_tab_array({[0]="TooManyValues",5,__enum__ = __golgi_Error},2)


__golgi_Golgi.new = {}
__golgi_Golgi.route = function(path,params,request,api) 
  do return api:__golgi__(path, params, request) end;
end

__golgi__Path_Path_Impl_.new = {}
__golgi__Path_Path_Impl_._new = function(parts) 
  local this1 = parts;
  do return this1 end;
end
__golgi__Path_Path_Impl_.fromString = function(str) 
  if (_G.string.sub(str, 1, 1) == "/") then 
    local startIndex = 1;
    local endIndex = nil;
    if (endIndex == nil) then 
      endIndex = #str;
    end;
    if (endIndex < 0) then 
      endIndex = 0;
    end;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
    local _this = (function() 
      local _hx_1
      if (endIndex < startIndex) then 
      _hx_1 = _G.string.sub(str, endIndex + 1, startIndex); else 
      _hx_1 = _G.string.sub(str, startIndex + 1, endIndex); end
      return _hx_1
    end )();
    local idx = 1;
    local ret = _hx_tab_array({}, 0);
    local delim_offset = (function() 
      local _hx_2
      if (#"/" > 0) then 
      _hx_2 = #"/"; else 
      _hx_2 = 1; end
      return _hx_2
    end )();
    while (idx ~= nil) do 
      local newidx = 0;
      if (#"/" > 0) then 
        newidx = _G.string.find(_this, "/", idx, true);
      else
        if (idx >= #_this) then 
          newidx = nil;
        else
          newidx = idx + 1;
        end;
      end;
      if (newidx ~= nil) then 
        local match = _G.string.sub(_this, idx, newidx - 1);
        ret:push(match);
        idx = newidx + #"/";
      else
        ret:push(_G.string.sub(_this, idx, #_this));
        idx = nil;
      end;
    end;
    do return __golgi__Path_Path_Impl_._new(ret) end;
  else
    local idx1 = 1;
    local ret1 = _hx_tab_array({}, 0);
    local delim_offset1 = (function() 
      local _hx_3
      if (#"/" > 0) then 
      _hx_3 = #"/"; else 
      _hx_3 = 1; end
      return _hx_3
    end )();
    while (idx1 ~= nil) do 
      local newidx1 = 0;
      if (#"/" > 0) then 
        newidx1 = _G.string.find(str, "/", idx1, true);
      else
        if (idx1 >= #str) then 
          newidx1 = nil;
        else
          newidx1 = idx1 + 1;
        end;
      end;
      if (newidx1 ~= nil) then 
        local match1 = _G.string.sub(str, idx1, newidx1 - 1);
        ret1:push(match1);
        idx1 = newidx1 + #"/";
      else
        ret1:push(_G.string.sub(str, idx1, #str));
        idx1 = nil;
      end;
    end;
    do return __golgi__Path_Path_Impl_._new(ret1) end;
  end;
end
__golgi__Path_Path_Impl_.fromStringArr = function(arr) 
  do return __golgi__Path_Path_Impl_._new(arr) end;
end
__golgi__Path_Path_Impl_.toArray = function(this1) 
  do return this1 end;
end

__golgi_meta_MetaGolgi.new = function() 
  local self = _hx_new(__golgi_meta_MetaGolgi.prototype)
  __golgi_meta_MetaGolgi.super(self)
  return self
end
__golgi_meta_MetaGolgi.super = function(self) 
end
__golgi_meta_MetaGolgi.prototype = _hx_a();
__golgi_meta_MetaGolgi.prototype._golgi_pass = function(self,req,next) 
  do return next(req) end
end

__haxe_IMap.new = {}

__haxe_Log.new = {}
__haxe_Log.formatOutput = function(v,infos) 
  local str = Std.string(v);
  if (infos == nil) then 
    do return str end;
  end;
  local pstr = Std.string(Std.string(infos.fileName) .. Std.string(":")) .. Std.string(infos.lineNumber);
  if ((infos ~= nil) and (infos.customParams ~= nil)) then 
    local _g = 0;
    local _g1 = infos.customParams;
    while (_g < _g1.length) do 
      local v1 = _g1[_g];
      _g = _g + 1;
      str = Std.string(str) .. Std.string((Std.string(", ") .. Std.string(Std.string(v1))));
    end;
  end;
  do return Std.string(Std.string(pstr) .. Std.string(": ")) .. Std.string(str) end;
end
__haxe_Log.trace = function(v,infos) 
  local str = __haxe_Log.formatOutput(v, infos);
  _hx_print(str);
end

__lua_Boot.new = {}
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.printEnum = function(o,s) 
  if (o.length == 2) then 
    do return o[0] end;
  else
    local str = Std.string(Std.string(o[0])) .. Std.string("(");
    s = Std.string(s) .. Std.string("\t");
    local _g1 = 2;
    local _g = o.length;
    while (_g1 < _g) do 
      _g1 = _g1 + 1;
      local i = _g1 - 1;
      if (i ~= 2) then 
        str = Std.string(str) .. Std.string((Std.string(",") .. Std.string(__lua_Boot.__string_rec(o[i], s))));
      else
        str = Std.string(str) .. Std.string(__lua_Boot.__string_rec(o[i], s));
      end;
    end;
    do return Std.string(str) .. Std.string(")") end;
  end;
end
__lua_Boot.printClassRec = function(c,result,s) 
  if (result == nil) then 
    result = "";
  end;
  local f = __lua_Boot.__string_rec;
  for k,v in pairs(c) do if result ~= '' then result = result .. ', ' end result = result .. k .. ':' .. f(v, s.. '	') end;
  do return result end;
end
__lua_Boot.__string_rec = function(o,s) 
  if (s == nil) then 
    s = "";
  end;
  local _g = type(o);
  local _g1 = _g;
  if (_g1) == "boolean" then 
    do return tostring(o) end;
  elseif (_g1) == "function" then 
    do return "<function>" end;
  elseif (_g1) == "nil" then 
    do return "null" end;
  elseif (_g1) == "number" then 
    if (o == _G.math.huge) then 
      do return "Infinity" end;
    else
      if (o == -_G.math.huge) then 
        do return "-Infinity" end;
      else
        if (o == 0) then 
          do return "0" end;
        else
          if (o ~= o) then 
            do return "NaN" end;
          else
            do return tostring(o) end;
          end;
        end;
      end;
    end;
  elseif (_g1) == "string" then 
    do return o end;
  elseif (_g1) == "table" then 
    if (o.__enum__ ~= nil) then 
      do return __lua_Boot.printEnum(o, s) end;
    else
      if ((_hx_wrap_if_string_field(o,'toString') ~= nil) and not __lua_Boot.isArray(o)) then 
        do return _hx_wrap_if_string_field(o,'toString')(o) end;
      else
        if (__lua_Boot.isArray(o)) then 
          local o2 = o;
          if (#s > 5) then 
            do return "[...]" end;
          else
            local _g2 = _hx_tab_array({}, 0);
            local _g11 = 0;
            while (_g11 < o2.length) do 
              local i = o2[_g11];
              _g11 = _g11 + 1;
              _g2:push(__lua_Boot.__string_rec(i, Std.string(s) .. Std.string(1)));
            end;
            do return Std.string(Std.string("[") .. Std.string(_g2:join(","))) .. Std.string("]") end;
          end;
        else
          if (o.__class__ ~= nil) then 
            do return Std.string(Std.string("{") .. Std.string(__lua_Boot.printClassRec(o, "", Std.string(s) .. Std.string("\t")))) .. Std.string("}") end;
          else
            local fields = __lua_Boot.fieldIterator(o);
            local buffer = ({});
            local first = true;
            _G.table.insert(buffer, "{ ");
            local f = fields;
            while (f:hasNext()) do 
              local f1 = f:next();
              if (first) then 
                first = false;
              else
                _G.table.insert(buffer, ", ");
              end;
              _G.table.insert(buffer, Std.string(Std.string(Std.string("") .. Std.string(Std.string(f1))) .. Std.string(" : ")) .. Std.string(Std.string(o[f1])));
            end;
            _G.table.insert(buffer, " }");
            do return _G.table.concat(buffer, "") end;
          end;
        end;
      end;
    end;
  elseif (_g1) == "thread" then 
    do return "<thread>" end;
  elseif (_g1) == "userdata" then 
    do return "<userdata>" end;else
  _G.error("Unknown Lua type",0); end;
end
__lua_Boot.fieldIterator = function(o) 
  if (_G.type(o) ~= "table") then 
    do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
      do return nil end;
    end,hasNext=function(self) 
      do return false end;
    end}) end;
  end;
  local tbl = (function() 
    local _hx_1
    if (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__; else 
    _hx_1 = o; end
    return _hx_1
  end )();
  local cur = _G.pairs(tbl);
  local next_valid = function(tbl1,val) 
    while (__lua_Boot.hiddenFields[val] ~= nil) do 
      val = cur(tbl1, val);
    end;
    do return val end;
  end;
  local cur_val = next_valid(tbl, cur(tbl, nil));
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur_val;
    cur_val = next_valid(tbl, cur(tbl, cur_val));
    do return ret end;
  end,hasNext=function(self) 
    do return cur_val ~= nil end;
  end}) end;
end

__lua_PairTools.new = {}
__lua_PairTools.pairsFold = function(table,func,seed) 
  for k,v in _G.pairs(table) do seed = func(k,v,seed) end;
  do return seed end;
end

__lug_LugMeta.new = function() 
  local self = _hx_new(__lug_LugMeta.prototype)
  __lug_LugMeta.super(self)
  return self
end
__lug_LugMeta.super = function(self) 
  __golgi_meta_MetaGolgi.super(self);
end
__lug_LugMeta.prototype = _hx_a();
__lug_LugMeta.prototype.user = function(self,req,next) 
  do return next(req) end
end
__lug_LugMeta.__super__ = __golgi_meta_MetaGolgi
setmetatable(__lug_LugMeta.prototype,{__index=__golgi_meta_MetaGolgi.prototype})

__lug_Lugaro.new = {}
__lug_Lugaro.route = function(path,params,request,api) 
  do return __golgi_Golgi.route(path, params, request, api) end;
end

__lug_Result.Continue = _hx_tab_array({[0]="Continue",0,__enum__ = __lug_Result},2)

__lug_Result.SwitchingProtocols = _hx_tab_array({[0]="SwitchingProtocols",1,__enum__ = __lug_Result},2)

__lug_Result.Processing = _hx_tab_array({[0]="Processing",2,__enum__ = __lug_Result},2)

__lug_Result.OK = function(response) local _x = _hx_tab_array({[0]="OK",3,response,__enum__=__lug_Result}, 3); return _x; end 
__lug_Result.Created = _hx_tab_array({[0]="Created",4,__enum__ = __lug_Result},2)

__lug_Result.Accepted = _hx_tab_array({[0]="Accepted",5,__enum__ = __lug_Result},2)

__lug_Result.NonAuthoritativeInformation = _hx_tab_array({[0]="NonAuthoritativeInformation",6,__enum__ = __lug_Result},2)

__lug_Result.NoContent = _hx_tab_array({[0]="NoContent",7,__enum__ = __lug_Result},2)

__lug_Result.ResetContent = _hx_tab_array({[0]="ResetContent",8,__enum__ = __lug_Result},2)

__lug_Result.PartialContent = _hx_tab_array({[0]="PartialContent",9,__enum__ = __lug_Result},2)

__lug_Result.MultiStatus = _hx_tab_array({[0]="MultiStatus",10,__enum__ = __lug_Result},2)

__lug_Result.AlreadyReported = _hx_tab_array({[0]="AlreadyReported",11,__enum__ = __lug_Result},2)

__lug_Result.IMUsed = _hx_tab_array({[0]="IMUsed",12,__enum__ = __lug_Result},2)

__lug_Result.MultipleChoices = _hx_tab_array({[0]="MultipleChoices",13,__enum__ = __lug_Result},2)

__lug_Result.MovedPermanently = _hx_tab_array({[0]="MovedPermanently",14,__enum__ = __lug_Result},2)

__lug_Result.Found = _hx_tab_array({[0]="Found",15,__enum__ = __lug_Result},2)

__lug_Result.SeeOther = _hx_tab_array({[0]="SeeOther",16,__enum__ = __lug_Result},2)

__lug_Result.NotModified = _hx_tab_array({[0]="NotModified",17,__enum__ = __lug_Result},2)

__lug_Result.UseProxy = _hx_tab_array({[0]="UseProxy",18,__enum__ = __lug_Result},2)

__lug_Result.TemporaryRedirect = _hx_tab_array({[0]="TemporaryRedirect",19,__enum__ = __lug_Result},2)

__lug_Result.PermanentRedirect = _hx_tab_array({[0]="PermanentRedirect",20,__enum__ = __lug_Result},2)

__lug_Result.BadRequest = _hx_tab_array({[0]="BadRequest",21,__enum__ = __lug_Result},2)

__lug_Result.Unauthorized = _hx_tab_array({[0]="Unauthorized",22,__enum__ = __lug_Result},2)

__lug_Result.PaymentRequired = _hx_tab_array({[0]="PaymentRequired",23,__enum__ = __lug_Result},2)

__lug_Result.Forbidden = _hx_tab_array({[0]="Forbidden",24,__enum__ = __lug_Result},2)

__lug_Result.NotFound = _hx_tab_array({[0]="NotFound",25,__enum__ = __lug_Result},2)

__lug_Result.MethodNotAllowed = _hx_tab_array({[0]="MethodNotAllowed",26,__enum__ = __lug_Result},2)

__lug_Result.NotAcceptable = _hx_tab_array({[0]="NotAcceptable",27,__enum__ = __lug_Result},2)

__lug_Result.ProxyAuthenticationRequired = _hx_tab_array({[0]="ProxyAuthenticationRequired",28,__enum__ = __lug_Result},2)

__lug_Result.RequestTimeout = _hx_tab_array({[0]="RequestTimeout",29,__enum__ = __lug_Result},2)

__lug_Result.Conflict = _hx_tab_array({[0]="Conflict",30,__enum__ = __lug_Result},2)

__lug_Result.Gone = _hx_tab_array({[0]="Gone",31,__enum__ = __lug_Result},2)

__lug_Result.LengthRequired = _hx_tab_array({[0]="LengthRequired",32,__enum__ = __lug_Result},2)

__lug_Result.PreconditionFailed = _hx_tab_array({[0]="PreconditionFailed",33,__enum__ = __lug_Result},2)

__lug_Result.PayloadTooLarge = _hx_tab_array({[0]="PayloadTooLarge",34,__enum__ = __lug_Result},2)

__lug_Result.RequestURITooLong = _hx_tab_array({[0]="RequestURITooLong",35,__enum__ = __lug_Result},2)

__lug_Result.UnsupportedMediaType = _hx_tab_array({[0]="UnsupportedMediaType",36,__enum__ = __lug_Result},2)

__lug_Result.RequestedRangeNotSatisfiable = _hx_tab_array({[0]="RequestedRangeNotSatisfiable",37,__enum__ = __lug_Result},2)

__lug_Result.ExpectationFailed = _hx_tab_array({[0]="ExpectationFailed",38,__enum__ = __lug_Result},2)

__lug_Result.ImaATeapot = _hx_tab_array({[0]="ImaATeapot",39,__enum__ = __lug_Result},2)

__lug_Result.MisdirectedRequest = _hx_tab_array({[0]="MisdirectedRequest",40,__enum__ = __lug_Result},2)

__lug_Result.UnprocessableEntity = _hx_tab_array({[0]="UnprocessableEntity",41,__enum__ = __lug_Result},2)

__lug_Result.Locked = _hx_tab_array({[0]="Locked",42,__enum__ = __lug_Result},2)

__lug_Result.FailedDependency = _hx_tab_array({[0]="FailedDependency",43,__enum__ = __lug_Result},2)

__lug_Result.UpgradeRequired = _hx_tab_array({[0]="UpgradeRequired",44,__enum__ = __lug_Result},2)

__lug_Result.PreconditionRequired = _hx_tab_array({[0]="PreconditionRequired",45,__enum__ = __lug_Result},2)

__lug_Result.TooManyRequests = _hx_tab_array({[0]="TooManyRequests",46,__enum__ = __lug_Result},2)

__lug_Result.RequestHeaderFieldsTooLarge = _hx_tab_array({[0]="RequestHeaderFieldsTooLarge",47,__enum__ = __lug_Result},2)

__lug_Result.ConnectionClosedWithoutResponse = _hx_tab_array({[0]="ConnectionClosedWithoutResponse",48,__enum__ = __lug_Result},2)

__lug_Result.UnavailableForLegalReasons = _hx_tab_array({[0]="UnavailableForLegalReasons",49,__enum__ = __lug_Result},2)

__lug_Result.ClientClosedRequest = _hx_tab_array({[0]="ClientClosedRequest",50,__enum__ = __lug_Result},2)

__lug_Result.InternalServerError = _hx_tab_array({[0]="InternalServerError",51,__enum__ = __lug_Result},2)

__lug_Result.NotImplemented = _hx_tab_array({[0]="NotImplemented",52,__enum__ = __lug_Result},2)

__lug_Result.BadGateway = _hx_tab_array({[0]="BadGateway",53,__enum__ = __lug_Result},2)

__lug_Result.ServiceUnavailable = _hx_tab_array({[0]="ServiceUnavailable",54,__enum__ = __lug_Result},2)

__lug_Result.GatewayTimeout = _hx_tab_array({[0]="GatewayTimeout",55,__enum__ = __lug_Result},2)

__lug_Result.HTTPVersionNotSupported = _hx_tab_array({[0]="HTTPVersionNotSupported",56,__enum__ = __lug_Result},2)

__lug_Result.VariantAlsoNegotiates = _hx_tab_array({[0]="VariantAlsoNegotiates",57,__enum__ = __lug_Result},2)

__lug_Result.InsufficientStorage = _hx_tab_array({[0]="InsufficientStorage",58,__enum__ = __lug_Result},2)

__lug_Result.LoopDetected = _hx_tab_array({[0]="LoopDetected",59,__enum__ = __lug_Result},2)

__lug_Result.NotExtended = _hx_tab_array({[0]="NotExtended",60,__enum__ = __lug_Result},2)

__lug_Result.NetworkAuthenticationRequired = _hx_tab_array({[0]="NetworkAuthenticationRequired",61,__enum__ = __lug_Result},2)

__lug_Result.NetworkConnectTimeoutError = _hx_tab_array({[0]="NetworkConnectTimeoutError",62,__enum__ = __lug_Result},2)

_hx_bit_clamp = function(v) 
  if v <= 2147483647 and v >= -2147483648 then
    if v > 0 then return _G.math.floor(v)
    else return _G.math.ceil(v)
    end
  end
  if v > 2251798999999999 then v = v*2 end;
  if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
  return _hx_bit.band(v, 2147483647 ) - math.abs(_hx_bit.band(v, 2147483648))
end
pcall(require, 'bit')
if bit then
  _hx_bit = bit
elseif bit32 then
  local _hx_bit_raw = bit32
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw });
  _hx_bit.bnot = function(...) return _hx_bit_clamp(_hx_bit_raw.bnot(...)) end;
  _hx_bit.bxor = function(...) return _hx_bit_clamp(_hx_bit_raw.bxor(...)) end;
else
  _G.error("Bitop library is missing.  Please install luabitop");
end
_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  __lua_Boot.hiddenFields = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true}
  
end

_hx_print = print or (function() end)
_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end
_hx_static_init();
Main.main()
